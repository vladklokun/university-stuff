1. Проаналізувати представлення рядків символів в мові C++.
	У мові С++ існує два типи рядків: нуль-терміновані та рядки, представлені високорівневими структурами даних, які надаються стандартною бібліотекою мови програмування у заголовку string. Нуль-терміновані рядки є послідовним набором даних символьного типу (масивом), який обов'язково має бути закінчений символом NUL ('\0').

	Рядки, представлені високорівневими структурами даних є об'єктами, породженими за шаблоном класу std::basic_string для обраного типу: char, wchar, char16_t, char32_t. Наприклад, std::string є псевдонімом для конструкції std::basic_string<char>, тобто об'єктом, породженим за шаблоном std::basic_string для символьного типу char. З моменту прийняття стандарту С++11, елементи таких рядків мають зберігатись у пам'яті послідовно, але стандарт не вимагає закінчувати рядки символом NUL чи будь-яким іншим.

2. Проаналізувати структуру програми на асемблері (оператори і їх пріоритет).
	Програма на мові асемблера для архітектури x86 діалекту NASM складається з рядків такого вигляду:
	<мітка:> інструкція операнди ; коментар

	Рядки з інструкціями можуть групуватись у секції. Групування за секціями виконується за допомогою асемблерної директиви section. Наприклад, для позначення початку секції з текстом програми використовується директива
	section .text; для початку секції зі статично виділеними даними — section .data, для резервації місця для даних, що будуть виділені динамічно — section. bss.

	Оператори для зазначеного діалекту мови асемблера x86 наведені у табл. 1 (пріорітет спадає від найвищого до найнижчого).
	Табл. 1:
	Unary
	*, /, //, %, %%
	+, -
	<<, >>
	Bitwise AND
	Bitwise XOR
	Bitwise OR

	1 — Унарні оператори
		+ — не робить нічого
		- — унарний мінус, змінює знак операнда
		~ — обчислює доповнення до одиниці
		! — логічне НЕ
		SEG — обчислює адресу сегмента, в якому знаходиться операнд
		int func — цілочисельні функції
	2 — Множення, ділення
		* — множення
		/ — беззнакове ділення
		// — знакове ділення
		% — обчислення беззнаковий залишок від ділення
		%% — обчислення знакового залишку від ділення
	3 — Додавання, віднімання
		+
		-
	4 — Побітові зсуви
		>> — зсув вправо
		<< — зсув вліво
	5 — Побітове І
		&
	6 — Побітове виключне АБО
		^
	7 — Побітове АБО
		|

3. Обгрунтувати алгоритм та представити програмний код для реаліхації заповнення ряд випадковими значеннями (від −50 до 50) і розробки функції, що виконує таку обробку символьного рядка: Підрахувати кількість пар сусідніх елементів, що мають протилежні знаки. При реалізації функції забороняється користатись функціями бібліотек мови C++.
	
	Для вирішення поставлених задач розроблені 2 функції: arr_rand_fill() для заповнення ряду випадковими значеннями та count_pairs_with_opposite_signs() для обчислення кількості пар сусідніх елементів, які мають протилежні знаки. 

	Спочатку викликається функція arr_rand_fill(масив, розмір_масива), а потім виконується пошук пар — count_pairs_with_opposite_signs(масив, розмір_масива).

