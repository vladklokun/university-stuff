
Лаба 1.3 «Каскадные таблицы стилей»
В этой лабораторной работе мы знакомились с каскадными таблицами стилей — CSS. Подпункты задания 1 мы копировали из методички. Во втором задании мы взяли таблицу из прошлого задания и оформили её с помощью стилей CSS. Например, в заголовке «Про группу» мы задали такое оформление:

// h1 — селектор (от слова «select» — выбирать), он показывает, к какому элементу применять оформление.
// в скобочках {...} — какое оформление мы хотим задать.
// h1 — применять ко всему, что находится между тегами <h></h>
h1 {
  color: #2b4fd7; // задать цвет, которому соответствует значение #2b4fd7
  line-height: 1; // установить межстрочный интервал в 1 условную единицу, то есть равную размеру шрифта.
  font-size: 3rem; // установить размер шрифта в три раза больше, чем у корневого значения
  font-weight: 500; // установить жирность шрифта в 500 (нормальный)
  font-variant: small-caps; // превратить буквы в капитель (маленький капс)
  letter-spacing: 0.05em; // установить расстояние между буквами в 0.05em, то есть 5% от текущего размера шрифта
  margin-bottom: 1.5rem; // установить отступ снизу в 1.5rem, то есть в 1.5 раза больше, чем корневой размер шрифта. Корневой размер шрифта — это значение font-size для элемента body
}

В следующем задании мы писали автобиографию и оформляли её с помощью блочной вёрстки: делали несколько колонок. Всего мы использовали 12 колонок, но заполняли их так, чтобы визуально страница делилась на 3 колонки. Чтобы вставлять изображение, мы использовали тег <img>

Лаба 1.4 «Псевдоклассы и псевдоэлементы. Блочная вёрстка»:
В этой лабе надо было использовать статические псевдоклассы, динамические псевдоклассы и псевдоэлементы. Есть:
1. Статические псевдоклассы :visited, :first, :link;
2. Динамические псевдоклассы :hover, :active, :focus;
3. Псевдоэлементы: ::first-letter, ::after.

Чтобы сделать навигационную панель, мы использовали JavaScript в библиотеке Bootstrap. Но можно сделать и так, чтобы выпадающее меню выдвигалось по наведению с помощью динамического псевдокласса :hover.

Чтобы сделать блочную вёрстку, мы использовали сетку библиотеки Bootstrap, с помощью которой мы создавали строчки, а внутри неё — нужное количество колонок.

Лаба 2.1 «Добавление сценариев JavaScript на страницу».
В этой лабе мы писали JavaScript-сценарии и подключали их к HTML-документу.
Чтобы добавить JavaScript к HTML-документу, есть 3 способа:
1. Добавить его внутри элемента <head></head>. Тогда он будет выполняться во время загрузки страницы.
2. Внутри элемента <body></body>.
3. Подключить из внешнего файла с помощью тега <script src="путь-к-скрипту">.

Первое задание — посчитать премию и заработок вместе с премией. Чтобы рассчитать премию, находим текстовое поле, которое отвечает за ввод дохода, по его идентификатору, считываем введённое значение с помощью атрибута value, умножаем значение на 0.25 и записываем в поле «Премия». Чтобы рассчитать общую сумму, точно так же считываем введённые значения из поля «Доход» и «Премия», но теперь превращаем их в числа с помощью конструктора Number() (ещё можно использовать метод parseFloat()).

Чтобы показать время, мы используем объект Date(). Для этого сначала создаём его, и чтобы показать время, вызываем метод toLocaleTimeString(), а чтобы показать дату — toLocaleDateString().

Площадь прямоугольника считаем так:
1. Считываем значения в полях.
2. Превращаем их в числа.
3. Умножаем числа.
4. Записываем в поле-результат.

Лаба 2.2. «Объекты окна браузера. Методы alert(), prompt(), confirm(). Приёмы работы с изображениями на веб-странице с помощью JavaScript»
ПЛощадь прямоугольника считаем так же, как и в предыдущей лабе, только теперь выводим результат в окно. Чтобы показать окно, используем метод alert(), который открывает окно с заданным текстом.

Дальше делаем форму регистрации. Сначала выбираем группу с помощью радиокнопки и нажимаем «Регистрация». Дальше создаём окно с просьбой ввести имя с помощью метода prompt(). Вводим, нажимаем «Ok».

## Изображения.
JavaScript нужен, чтобы динамически менять свойства объектов на странице. Чтобы это сделать, в JavaScript-скриптах мы меняем атрибуты и свойства элементов и объектов, которые нас интересуют.

### Задание 1: увеличить и уменьшить все изображения на странице.
Чтобы обращаться ко всем изображениям на странице, используем массив document.images. Он является атрибутом DOM-объекта document. Чтобы уменьшить изображение из массива, меняем значение его атрибута maxHeight. Аналогично с увеличением.

### Задание 2: когда пользователь нажимает на второе изображение один раз, увеличить его; когда нажимает дважды — уменьшить до исходных размеров.
Чтобы увеличивать изображение, когда пользователь нажимает на него один раз, добавляем обработчик события onclick, который будет увеличивать изображение. Чтобы уменьшать изображение, когда пользователь нажимает на него дважды, добавляем обработчик события ondblclick (пишется именно d-b-l, а читать можно double), чтобы уменьшать изображение.

### Задание 3.1: когда пользователь вводит номер изображения и нажимает кнопку «Открыть», нужно открыть изображение в новой вкладке
Когда пользователь вводит число в текстовое поле и нажимает на кнопку «Открыть», мы собираем имя файла: «имя_файла» + «номер» и открываем полученное имя файла в новом окне. Чтобы открыть файл в новом окне, мы вызываем метод window.open().

### Задание 3.2: когда пользователь нажимает кнопку «Закрыть», все изображения на странице уменьшаются до исходных размеров
Для этого мы обходим массив document.images и уменьшаем каждое изображение на странице.

Лаба 2.3 «Новые семантические элементы разметки в HTML5. Применение CSS3. Горизонтальное выпадающее меню с поиском на CSS3, HTML5»
В этой лабе мы используем новые возможности HTML5 и CSS3.
В HTML мы используем теги: aside — боковая колнка, article — основной текст статьи, сообщения и прочего.
В CSS используем свойства: box-shadow, text-shadow, border-radius.
Эти свойства не всегда работают во всех браузерах, вроде Mozilla, Chrome, Opera. Чтобы они работали в разных браузерах, к ним добавляют префиксы: -moz-box-shadow, -moz-text-shadow — для Mozilla; -webkit-box-shadow, -webkit-text-shadow — для браузеров на движке Webkit, а именно: Chrome, Opera, Yandex.Browser.

# Лаба 2.4. «Элемент разметки canvas. Элемент разметки video. Применение элементов создания форм»
В этой лабораторной работе мы создаём план компьютерного класса с помощью элемента canvas. Он нужен, чтобы рисовать.

# Линия
Чтобы нарисовать линию, вызываем метод moveTo(), чтобы «подвинуться» к начальной координате, и lineTo(), чтобы рисовать от начальной точки, к которой мы подвинулись раньше, до желаемой точки.

# Незалитый прямоугольник
Чтобы нарисовать незалитый прямоугольник, нужно вызвать метод strokeRect(). Ему передают четыре параметра:
1. Координата X начала.
2. Координата Y начала.
3. Длина по X.
4. Длина по Y.

# Залитый прямоугольник
Чтобы нарисовать залитый прямоугольник, нужно вызвать метод fillRect(). Ему передают те же четыре параметра.

# Окружность
Чтобы нарисовать окружность, нужно вызвать метод arc(), который рисует сегмент арки. Ему передают как минимум 5 параметров:
1. Координата X начала.
2. Координата Y начала.
3. Радиус окружности.
4. Угол окружности, где начинать рисовать, в радианах. Например, начинать рисовать с 0 радиан.
5. Угол окружность, где закончить рисовать. Например, начать рисовать с угла 1π радиан и закончить в углу 1.5π радиан.

# Формы
Дальше нужно создать форму, где мы будем использовать поля ввода, которые появились в HTML5:
1. Ввод электронной почты.
2. Телефона. Можно задать шаблон, как вводить номер телефона, с помощью атрибута pattern.
3. Множественного структурированого выбора.
4. Ползунка.
5. Выпадающего меню.
6. Текстовое поле с подсказками.
